"use client";
import { getAlchemyHttpUrl } from "./scaffold-eth";
import { ethers } from "ethers";
import { AlphaRouter, SwapOptionsSwapRouter02, SwapType } from '@uniswap/smart-order-router';
import { Percent, CurrencyAmount, TradeType, Token } from "@uniswap/sdk-core";
import JSBI from "jsbi";

if (typeof window !== "undefined") {
  // @ts-ignore
    window.Browser = {
      T: () => {
      }
    };
  }

export const getQuote = async (
  _chainId: number,
  _walletAddress: string,
  _tokenIn: Token,
  _tokenOut: Token,
  _amountIn: bigint,
  _decimals: number,
) => {
  const alchemyHttpUrl = getAlchemyHttpUrl(_chainId);
  const provider = new ethers.providers.JsonRpcProvider(alchemyHttpUrl);

  const router = new AlphaRouter({
    chainId: _chainId,
    provider,
  });

  const options: SwapOptionsSwapRouter02 = {
    recipient: _walletAddress,
    slippageTolerance: new Percent(50, 10_000),
    deadline: Math.floor(Date.now() / 1000 + 1800),
    type: SwapType.SWAP_ROUTER_02,
  };

  const rawTokenAmountIn: JSBI = fromReadableAmount(Number(_amountIn), _decimals);

  const route = await router.route(
    CurrencyAmount.fromRawAmount(_tokenIn, rawTokenAmountIn.toString()),
    _tokenOut,
    TradeType.EXACT_INPUT,
    options,
  );

  return route;
};

export function fromReadableAmount(amount: number, decimals: number): JSBI {
  const extraDigits = Math.pow(10, countDecimals(amount));
  const adjustedAmount = amount * extraDigits;
  return JSBI.divide(
    JSBI.multiply(JSBI.BigInt(adjustedAmount), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals))),
    JSBI.BigInt(extraDigits),
  );
}

function countDecimals(value: number): number {
  if (Math.floor(value) === value) return 0;
  const decimalPart = value.toString().split(".")[1];
  return decimalPart ? decimalPart.length : 0;
}
